@using Todo.Controllers
@using Todo.Data.Entities
@using Todo.Services
@model Todo.Models.TodoLists.TodoListDetailViewmodel
@inject IUserProfileService UserProfileService

@{
    ViewData["Title"] = $"List: {Model.Title}";
}

<h2>@ViewData["Title"]</h2>

<div class="col-md-6">

    @* These would be better as an ajax call or client side filtering/sorting with javascript *@
    <form method="get" asp-controller="TodoList" asp-action="Detail">
        <input type="checkbox" id="hideDone" name="hideDone" value="true" data-val="true" @(Model.HideDone ? "checked" : "") onchange="this.form.submit()" />
        <label for="hideDone">Hide Done Items</label>

        <input type="checkbox" id="sortByRank" name="sortByRank" value="true" data-val="true" @(Model.SortByRank ? "checked" : "") onchange="this.form.submit()" />
        <label for="sortByRank">Sort By Rank</label>

        <input name="TodoListId" type="hidden" value="@Model.TodoListId">
    </form>

    <ul class="list-group">
        
        <li class="list-group-item">
            <a asp-action="Create" asp-controller="TodoItem" asp-route-todoListId="@Model.TodoListId">
                <strong>Add New Item</strong>
            </a>
        </li>

        @foreach (var item in Model.Items)
        {
            string contextualClass;
            switch (item.Importance)
            {
                case Importance.High:
                    contextualClass = "list-group-item-danger";
                    break;
                case Importance.Low:
                    contextualClass = "list-group-item-info";
                    break;
                default:
                    contextualClass = "";
                    break;
            }

            <li class="list-group-item @contextualClass">
                
                <div class="row">

                <div class="col-md-8">
                    <a asp-action="Edit" asp-controller="TodoItem" asp-route-todoItemId="@item.TodoItemId">

                        @if (item.IsDone)
                        {
                            <s>@item.Title</s>
                        }
                        else
                        {
                            <text>@item.Title</text>
                        }
                    </a>
                </div>

                <div class="col-md-4 text-right">
                    <small>
                        @{
                            var displayName = await UserProfileService.GetUserName(@item.ResponsibleParty.Email);
                            if (!string.IsNullOrEmpty(displayName))
                            {
                                <text>@item.ResponsibleParty.Email - @displayName</text>
                            }
                            else
                            {
                                <text>@item.ResponsibleParty.Email</text>
                            }
                        }

                        <img src="https://www.gravatar.com/avatar/@Gravatar.GetHash(item.ResponsibleParty.Email)?s=30"/>

                    </small>
                </div>
                </div>

            </li>
        }
    </ul>
</div>